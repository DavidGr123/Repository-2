## Exercise 1: Performance Analysis of Portfolios

Create (using four of the ten stocks) multiple portfolios using `tq_portfolio()`:
  
  *  an equally weighted one, 
*  a market-value weighted one, and 
*  one where you create a trading strategy according to [https://www.datacamp.com/community/tutorials/r-trading-tutorial](https://www.datacamp.com/community/tutorials/r-trading-tutorial) - use the tools in the tidyquant package!! Trade your four stocks in a way that Portfolios weights (in sum) do never exceed +-1.

DO a performance analysis a la `vignette("TQ05-performance-analysis-with-tidyquant")`.

```{r getting SP500 stocks}

#getting 10 stocks from sp500 index

AAPL <- tq_get("AAPL", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")
AMZN <- tq_get("AMZN", get = "stock-prices", from = "2000-01-01", to = "2019-09-17")
MSFT <- tq_get("MSFT", get = "stock.prices", from = "2000-01-01", to = "2019-09-17")
GOOG <- tq_get("MSFT", get = "stock.prices", from = "2000-01-01", to = "2019-09-17")
CSCO <- tq_get("CSCO", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")
BA <- tq_get("BA", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")
FB <- tq_get("FB", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")
NVDA <- tq_get("NVDA", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")
AMGN <- tq_get("AMGN", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")
TSLA <- tq_get("TSLA", get = "stock.prices", from =  "2000-01-01", to = "2019-09-17")

#select four stocks
#I choose CSCO, BA, NVDA, TSLA because I like the companies
```

```{r Getting returns from the four stocks}
#we got all returns for the stocks in one tibble and renamed the column return 
monthly_returns_stocks <- c("CSCO", "BA", "NVDA", "TSLA") %>%
  tq_get(get = "stock.prices", from = "2000-01-01", to = "2019-09-17") %>%
  group_by(symbol)%>%
  tq_transmute(adjusted, periodReturn, period = "monthly", col_rename =  "Ra")
monthly_returns_stocks
```

```{r Create baseline returns}
#to compare it with an index
monthly_returns_baseline <- "^GSPC" %>%
  tq_get(get = "stock.prices", from = "2000-01-01", to = "2019-09-17") %>%
  tq_transmute(adjusted, periodReturn, period = "monthly", col_rename = "Rb")
monthly_returns_baseline
```
```{r Aggregate portfolios}
#because we want 3 portfolios - we grow our portfolios, scalling a single portfolio to many
mult_monthly_returns_stocks <- monthly_returns_stocks %>%
  tq_repeat_df(n = 3)

mult_monthly_returns_stocks
```
```{r an equally weighted one}
#first portfolio is equally weight
#that is why we choose 25% for each

stock_returns_monthly <- c("CSCO", "BA", "NVDA","TSLA") %>%
  tq_get(get  = "stock.prices",
         from = "2000-01-01",
         to   = "2019-09-17") %>%
  group_by(symbol) %>%
  tq_transmute(select     = adjusted, 
               mutate_fun = periodReturn, 
               period     = "monthly", 
               col_rename = "Ra")

#Second, get baseline asset returns, which is the exact same as Steps 1B and 2B from the Single Portfolio example.

baseline_returns_monthly <- "XLK" %>%
  tq_get(get  = "stock.prices",
         from = "2016-01-01",
         to   = "2019-12-31") %>%
  tq_transmute(select     = adjusted, 
               mutate_fun = periodReturn, 
               period     = "monthly", 
               col_rename = "Rb")

stock_returns_monthly_multi <- stock_returns_monthly %>%
  tq_repeat_df(n = 3)
stock_returns_monthly_multi


#Hereâ€™s what the weights table should look like for our example:

weights <- c(0.25, 0.25, 0.25, 0.25,
             0.25, 0.25, 0.25, 0.25,
             0.25, 0.25, 0.25, 0.25)

stocks <- c("CSCO", "BA", "NVDA","TSLA")
weights_table <-  tibble(stocks) %>%
  tq_repeat_df(n = 3) %>%
  bind_cols(tibble(weights)) %>%
  group_by(portfolio)
weights_table

portfolio_returns_monthly_multi <- stock_returns_monthly_multi %>%
  tq_portfolio(assets_col  = symbol, 
               returns_col = Ra, 
               weights     = weights_table, 
               col_rename  = "Ra")
portfolio_returns_monthly_multi



#Now just pass the the expanded stock_returns_monthly_multi and the weights_table to tq_portfolio for portfolio aggregation.

portfolio_returns_monthly_multi <- mult_monthly_returns_stocks %>%
  tq_portfolio(assets_col  = symbol, 
               returns_col = Ra, 
               weights     = weights_table, 
               col_rename  = "Ra")
portfolio_returns_monthly_multi
```



```{r a market-value weighted one}
library(rvest)
library(TTR)
#library(dygraphs)
library(lubridate)

#https://finance.yahoo.com/quote/BA?p=BA&.tsrc=fin-srch&guccounter=1
#marketcaps: CSCO=212.095B;TSLA=83.434B;NVDA=109.748B;BA=94.87B
marketcaps <- c(212.095, 83.434, 109.748, 94.87)
#compute the weights
weights <- marketcaps /sum(marketcaps)
#inspect summary statistics
summary(weights)
#show the weights
weights
```
```{r market value weighted portfolio}
#CSCO = 42,41%
#TSLA = 16,68%
#NVDA= 21,94%
#BA = 18,97%


#*  one where you create a trading strategy according to [https://www.datacamp.com/community/tutorials/r-trading-tutorial](https://www.datacamp.com/community/tutorials/r-trading-tutorial) - use the tools in the tidyquant package!! Trade your four stocks in a way that Portfolios weights (in sum) do never exceed +-1.
```

```{r finding out about our own trading strategy}
library(rvest)
library(TTR)
library(lubridate)

#sma is used to produce moving averages of the stock prices --> same weight for all historical data
#we produce moving averages because we need them for our "trend following" trading strategy to compare it

sma_CSCO <- SMA(CSCO[, "close"], n=50)
sma_TSLA <- SMA(TSLA[, "close"], n=50)
sma_NVDA <- SMA(NVDA[, "close"], n=50)
sma_BA <- SMA(BA[, "close"], n=50)

sma_CSCO_200 <- SMA(CSCO[, "close"], n=200)
sma_TSLA_200 <- SMA(TSLA[, "close"], n=200)
sma_NVDA_200 <- SMA(NVDA[, "close"], n=200)
sma_BA_200 <- SMA(BA[, "close"], n=200)

#alternatively you could have also used ema --> it gives more weight to current data --> maybe makes more sense
```
```{r creating dataframes for each stock with 200days and 50days moving averages}

library(tidyverse)
library(tidyquant)

#create a CSCO dataframe with the important data
CSCO_dates <- select(CSCO, date)
CSCO_dates

data.frame_CSCO <- data.frame(CSCO_dates, sma_CSCO_200, sma_CSCO)
data.frame_CSCO

#create a TSLA dataframe with the important data
TSLA_dates <- select(TSLA, date)
TSLA_dates

data.frame_TSLA <- data.frame(TSLA_dates, sma_TSLA_200, sma_TSLA)
data.frame_TSLA

#create a BA dataframe with the important data
BA_dates <- select(BA, date)
BA_dates

data.frame_BA <- data.frame(BA_dates, sma_BA_200, sma_BA)
data.frame_BA

#creat a NVDA dataframe with the important data
NVDA_dates <- select(NVDA, date)
NVDA_dates

data.frame_NVDA <- data.frame(NVDA_dates, sma_NVDA_200, sma_NVDA)
data.frame_NVDA
```
```{r compare the second and the third colomn and fill them with 0 & 1}
# new column - fill with 0, but when 50day > 200 days, fill with 1

data.frame_CSCO['CSCO'] <- 0
data.frame_CSCO$CSCO[data.frame_CSCO$sma_CSCO > data.frame_CSCO$sma_CSCO_200] = 1  

data.frame_TSLA['TSLA'] <- 0
data.frame_TSLA$TSLA[data.frame_TSLA$sma_TSLA > data.frame_TSLA$sma_TSLA_200] = 1  

data.frame_BA['BA'] <- 0
data.frame_BA$BA[data.frame_BA$sma_BA > data.frame_BA$sma_BA_200] = 1  

data.frame_NVDA['NVDA'] <- 0
data.frame_NVDA$NVDA[data.frame_NVDA$sma_NVDA > data.frame_NVDA$sma_NVDA_200] = 1  
```
```{r sum up the colomn with 0 & 1}
#so we find out how many 1's are there --> on how many days we want to invest out of all
V_01 <- select(data.frame_CSCO, CSCO)
colSums(V_01, na.rm = TRUE)

nrow(data.frame_CSCO)
#calculate weight for CSCO
WEIGHT_CSCO <- colSums(V_01, na.rm = TRUE)/nrow(data.frame_CSCO)*100

V_02 <- select(data.frame_TSLA, TSLA)
colSums(V_02, na.rm = TRUE)

nrow(data.frame_TSLA)
#calculate weight for TSLA
WEIGHT_TSLA <- colSums(V_02, na.rm = TRUE)/nrow(data.frame_TSLA)*100

#calcuation for BA
V_03 <- select(data.frame_BA, BA)
colSums(V_03, na.rm = TRUE)

nrow(data.frame_BA)
#calculate weight BA
WEIGHT_BA <- colSums(V_03, na.rm = TRUE)/nrow(data.frame_BA)*100

#calculation for NVDA
V_04 <- select(data.frame_NVDA, NVDA)
colSums(V_04, na.rm = TRUE)

nrow(data.frame_NVDA)
#calculate weight NVDA
WEIGHT_NVDA <- colSums(V_04, na.rm = TRUE)/nrow(data.frame_NVDA)*100
```
```{r} 
#weight calculation 
all_weights <- sum(WEIGHT_CSCO, WEIGHT_TSLA, WEIGHT_NVDA, WEIGHT_BA)

final_weight_CSCO <- WEIGHT_CSCO/all_weights
final_weight_TSLA <- WEIGHT_TSLA/all_weights
final_weight_NVDA <- WEIGHT_NVDA/all_weights
final_weight_BA <- WEIGHT_BA/all_weights


all_weights_tb <- tibble(final_weight_CSCO, final_weight_TSLA, final_weight_BA, final_weight_NVDA)

rowSums(all_weights_tb)
```
```{r }
library(rvest)
library(TTR)
library(lubridate)
```

```{r create all the three portfolios}
#create new table of weights
weights_portfolio <- c(0.25, 0.25, 0.25, 0.25,
                       weights[1], weights[2], weights[3], weights[4],
                       final_weight_CSCO, final_weight_TSLA, final_weight_BA, final_weight_NVDA)

stocks <- c("CSCO", "TSLA", "NVDA", "BA")

weights_table <- tibble(stocks)%>%
  tq_repeat_df(n = 3) %>%
  bind_cols(tibble(weights_portfolio)) %>%
  group_by(portfolio)

weights_table
```
```{r we have to merge the expanded stock returns, the weights table for a portfolio aggregation}

portfolio_returns_monthly_multi <- mult_monthly_returns_stocks %>%
  tq_portfolio(assets_col = symbol,
               returns_col = Ra,
               weights = weights_table,
               col_rename = "Ra")
portfolio_returns_monthly_multi
```
```{r Merge with the baseline using date as the key}
multiple_portfolio <- left_join(portfolio_returns_monthly_multi,
                                monthly_returns_baseline,
                                by = "date")
multiple_portfolio
```


```{r performance calculation}
multiple_portfolio %>%
  tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
```
```{r}
#Beta measures a security's sensitivity to market risk (the lower the better)
#alpha - difference from expected and required return (the higher the better)
```

```{r}
#Sharpe Ratio
multiple_portfolio %>%
  tq_performance(Ra = Ra, Rb = Rb, performance_fun = SharpeRatio)
#the higher the Sharpe Ratio the better
```
